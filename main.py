#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram –±–æ—Ç @alyx_design_bot —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º admin —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import logging
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8307209669:AAFl5JKEBUPkJ8akr01RfXKwvLTNEoQPLqQ"
OWNER_ID = 1014948227
WEBSITE_URL = "https://www.alyxbabysitter.ru"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class Database:
    def __init__(self):
        self.users: Dict[int, dict] = {}
        self.orders: List[dict] = []
        self.first_time_users: List[int] = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    def add_user(self, user_id: int, user_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        is_new_user = user_id not in self.users
        
        self.users[user_id] = {
            'id': user_id,
            'first_name': user_data.get('first_name', ''),
            'username': user_data.get('username', ''),
            'joined_at': datetime.now(),
            'last_seen': datetime.now(),
            'is_new': is_new_user
        }
        
        if is_new_user:
            self.first_time_users.append(user_id)
        
        return is_new_user
    
    def update_last_seen(self, user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞"""
        if user_id in self.users:
            self.users[user_id]['last_seen'] = datetime.now()
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_users = len(self.users)
        new_users_today = len([u for u in self.users.values() 
                              if u['joined_at'].date() == datetime.now().date()])
        return {
            'total_users': total_users,
            'new_users_today': new_users_today,
            'orders': len(self.orders)
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
MESSAGES = {
    'welcome_new_user': """üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–Ø –±–æ—Ç AI-–¥–∏–∑–∞–π–Ω–µ—Ä–∞ <b>Alyx Babysitter</b>!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚Ä¢ –£–∑–Ω–∞—Ç—å –æ —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö  
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üöÄ Start"</b> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!""",

    'start': """üé® <b>AI Designer Alyx Babysitter</b>

–°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—ã —Å –ø–æ–º–æ—â—å—é –ò–ò:
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤
‚Ä¢ AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –∏ –ø–æ—Ä—Ç—Ä–µ—Ç—ã
‚Ä¢ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–µ —Å–Ω–∏–ø–ø–µ—Ç—ã
‚Ä¢ –î–∏–∑–∞–π–Ω –æ–±–ª–æ–∂–µ–∫ —Ä–µ–ª–∏–∑–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá""",

    'portfolio': """üé® <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b>

–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

‚Ä¢ AI-–ø–æ—Ä—Ç—Ä–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ Y2K/—Ç—Ä—ç–ø
‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤
‚Ä¢ AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ-—Å–Ω–∏–ø–ø–µ—Ç—ã
‚Ä¢ –û–±–ª–æ–∂–∫–∏ —Ä–µ–ª–∏–∑–æ–≤ –∏ –¥–∏–∑–∞–π–Ω

üåê –ü–æ–ª–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: www.alyxbabysitter.ru""",

    'services': """üíé <b>–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã</b>

ü§ñ <b>–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫</b>
–û—Ç 15,000‚ÇΩ | 2-3 –Ω–µ–¥–µ–ª–∏
–°–æ–∑–¥–∞–Ω–∏–µ AI-–º–æ–¥–µ–ª–∏ –ø–æ –≤–∞—à–∏–º —Ñ–æ—Ç–æ

üì∏ <b>AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è</b>  
–û—Ç 5,000‚ÇΩ | 3-5 –¥–Ω–µ–π
–ü–∞–∫–µ—Ç –æ—Ç 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

üé¨ <b>AI-—Å–Ω–∏–ø–ø–µ—Ç</b>
–û—Ç 3,000‚ÇΩ | 2-3 –¥–Ω—è
–ö–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ 9-15 —Å–µ–∫—É–Ω–¥

üé® <b>–î–∏–∑–∞–π–Ω –æ–±–ª–æ–∂–∫–∏</b>
–û—Ç 2,000‚ÇΩ | 1-2 –¥–Ω—è
–û–±–ª–æ–∂–∫–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞/–ø—Ä–æ–µ–∫—Ç–∞

üíº <b>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—ä–µ–º–∫–∞</b>
–û—Ç 8,000‚ÇΩ | 5-7 –¥–Ω–µ–π
–†–µ–∫–ª–∞–º–Ω—ã–µ –≤–∏–∑—É–∞–ª—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞

üìû –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" –Ω–∏–∂–µ""",

    'contact': """üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>

–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:

üí¨ <b>Telegram:</b> @alyx_babysitter
üåê <b>–°–∞–π—Ç:</b> www.alyxbabysitter.ru
üìß <b>Email –ø–æ –∑–∞–ø—Ä–æ—Å—É</b>

–û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤ ‚ö°""",

    'about': """‚ÑπÔ∏è <b>–û –¥–∏–∑–∞–π–Ω–µ—Ä–µ</b>

üë®‚Äçüé® <b>Alyx Babysitter</b>
AI-–¥–∏–∑–∞–π–Ω–µ—Ä –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç

üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤
‚Ä¢ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω

üíº <b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ 100+ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏ –∏ –ª–µ–π–±–ª–∞–º–∏
‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤"""
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_welcome_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("üöÄ Start", callback_data="start_bot")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio"),
         InlineKeyboardButton("üíé –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact"),
         InlineKeyboardButton("‚ÑπÔ∏è –û –¥–∏–∑–∞–π–Ω–µ—Ä–µ", callback_data="about")],
        [InlineKeyboardButton("üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", url="https://t.me/alyx_babysitter")],
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=WEBSITE_URL)]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    is_new_user = db.add_user(user.id, user.to_dict())
    
    if is_new_user:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            MESSAGES['welcome_new_user'],
            parse_mode='HTML',
            reply_markup=get_welcome_keyboard()
        )
    else:
        # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await update.message.reply_text(
            MESSAGES['start'],
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )

async def portfolio_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /portfolio"""
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    await update.message.reply_text(
        MESSAGES['portfolio'],
        parse_mode='HTML',
        reply_markup=get_back_keyboard()
    )

async def services_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /services"""
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    await update.message.reply_text(
        MESSAGES['services'],
        parse_mode='HTML',
        reply_markup=get_back_keyboard()
    )

async def contact_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /contact"""
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    await update.message.reply_text(
        MESSAGES['contact'],
        parse_mode='HTML',
        reply_markup=get_back_keyboard()
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /about"""
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    await update.message.reply_text(
        MESSAGES['about'],
        parse_mode='HTML',
        reply_markup=get_back_keyboard()
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    user_id = update.effective_user.id
    
    if user_id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    stats = db.get_stats()
    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üÜï –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['new_users_today']}
üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['orders']}

üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
    
    await update.message.reply_text(stats_text, parse_mode='HTML')

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    user_id = update.effective_user.id
    
    if user_id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = ' '.join(context.args)
    
    if not message_text:
        await update.message.reply_text(
            """üì¢ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]

–ü—Ä–∏–º–µ—Ä:
/broadcast –ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ!

–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.""",
            parse_mode='HTML'
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    sent_count = 0
    failed_count = 0
    
    for user_id in db.users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Alyx:</b>\n\n{message_text}",
                parse_mode='HTML'
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    await update.message.reply_text(
        f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –û—à–∏–±–æ–∫: {failed_count}
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.users)}""",
        parse_mode='HTML'
    )

async def admin_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ admin –∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = update.effective_user.id
    
    if user_id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    help_text = """üëë <b>Admin –∫–æ–º–∞–Ω–¥—ã</b>

üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üì¢ /broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚ùì /admin_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>

<code>/broadcast –ü—Ä–∏–≤–µ—Ç! –ù–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ!</code>
<code>/stats</code>

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ bot.log"""
    
    await update.message.reply_text(help_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer()
    db.update_last_seen(user_id)
    
    if query.data == "start_bot":
        # –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
        await query.edit_message_text(
            MESSAGES['start'],
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    
    elif query.data == "portfolio":
        await query.edit_message_text(
            MESSAGES['portfolio'],
            parse_mode='HTML',
            reply_markup=get_back_keyboard()
        )
    
    elif query.data == "services":
        await query.edit_message_text(
            MESSAGES['services'],
            parse_mode='HTML',
            reply_markup=get_back_keyboard()
        )
    
    elif query.data == "contact":
        await query.edit_message_text(
            MESSAGES['contact'],
            parse_mode='HTML',
            reply_markup=get_back_keyboard()
        )
    
    elif query.data == "about":
        await query.edit_message_text(
            MESSAGES['about'],
            parse_mode='HTML',
            reply_markup=get_back_keyboard()
        )
    
    elif query.data == "back_to_main":
        await query.edit_message_text(
            MESSAGES['start'],
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("portfolio", portfolio_command))
    application.add_handler(CommandHandler("services", services_command))
    application.add_handler(CommandHandler("contact", contact_command))
    application.add_handler(CommandHandler("about", about_command))
    
    # Admin –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("admin_help", admin_help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ @alyx_design_bot —Å admin —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

