#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram –±–æ—Ç –¥–ª—è AI-–¥–∏–∑–∞–π–Ω–µ—Ä–∞ Alyx Babysitter
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
"""

import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebApp
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import json
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8307209669:AAFl5JKEBUPkJ8akr01RfXKwvLTNEoQPLqQ"
OWNER_ID = 1014948227
WEBSITE_URL = "https://www.alyxbabysitter.ru"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class Database:
    def __init__(self):
        self.users: Dict[int, dict] = {}
        self.orders: List[dict] = []
        self.subscribers: List[int] = []
    
    def add_user(self, user_id: int, user_data: dict):
        self.users[user_id] = {
            'id': user_id,
            'first_name': user_data.get('first_name', ''),
            'username': user_data.get('username', ''),
            'joined_at': datetime.now(),
            'last_seen': datetime.now()
        }
    
    def update_last_seen(self, user_id: int):
        if user_id in self.users:
            self.users[user_id]['last_seen'] = datetime.now()
    
    def add_order(self, order_data: dict):
        order_data['id'] = len(self.orders) + 1
        order_data['created_at'] = datetime.now()
        order_data['status'] = 'new'
        self.orders.append(order_data)
        return order_data['id']
    
    def subscribe_user(self, user_id: int):
        if user_id not in self.subscribers:
            self.subscribers.append(user_id)
    
    def unsubscribe_user(self, user_id: int):
        if user_id in self.subscribers:
            self.subscribers.remove(user_id)

db = Database()

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    'start': """üé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä AI-–¥–∏–∑–∞–π–Ω–∞!</b>

–Ø Alyx Babysitter ‚Äî AI-–¥–∏–∑–∞–π–Ω–µ—Ä, —Å–æ–∑–¥–∞—é:
‚Ä¢ ü§ñ –¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏
‚Ä¢ üì∏ AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏  
‚Ä¢ üé¨ –í–∏–¥–µ–æ-—Å–Ω–∏–ø–ø–µ—Ç—ã
‚Ä¢ üé® –û–±–ª–æ–∂–∫–∏ –∏ –¥–∏–∑–∞–π–Ω
‚Ä¢ üíº –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—ä–µ–º–∫–∏

<i>–ë—ã—Å—Ç—Ä–æ, —á–∏—Å—Ç–æ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ.</i>

üî• <b>–ù–∞–∂–º–∏—Ç–µ Menu –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!</b>""",

    'portfolio': """üé® <b>–ú–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b>

–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

‚Ä¢ AI-–ø–æ—Ä—Ç—Ä–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ Y2K/—Ç—Ä—ç–ø
‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤
‚Ä¢ AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ-—Å–Ω–∏–ø–ø–µ—Ç—ã
‚Ä¢ –û–±–ª–æ–∂–∫–∏ —Ä–µ–ª–∏–∑–æ–≤ –∏ –¥–∏–∑–∞–π–Ω

üåê –ü–æ–ª–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: www.alyxbabysitter.ru""",

    'services': """üíé <b>–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã</b>

ü§ñ <b>–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫</b>
–û—Ç 15,000‚ÇΩ | 2-3 –Ω–µ–¥–µ–ª–∏
–°–æ–∑–¥–∞–Ω–∏–µ AI-–º–æ–¥–µ–ª–∏ –ø–æ –≤–∞—à–∏–º —Ñ–æ—Ç–æ

üì∏ <b>AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è</b>  
–û—Ç 5,000‚ÇΩ | 3-5 –¥–Ω–µ–π
–ü–∞–∫–µ—Ç –æ—Ç 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

üé¨ <b>AI-—Å–Ω–∏–ø–ø–µ—Ç</b>
–û—Ç 3,000‚ÇΩ | 2-3 –¥–Ω—è
–ö–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ 9-15 —Å–µ–∫—É–Ω–¥

üé® <b>–î–∏–∑–∞–π–Ω –æ–±–ª–æ–∂–∫–∏</b>
–û—Ç 2,000‚ÇΩ | 1-2 –¥–Ω—è
–û–±–ª–æ–∂–∫–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞/–ø—Ä–æ–µ–∫—Ç–∞

üíº <b>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—ä–µ–º–∫–∞</b>
–û—Ç 8,000‚ÇΩ | 5-7 –¥–Ω–µ–π
–†–µ–∫–ª–∞–º–Ω—ã–µ –≤–∏–∑—É–∞–ª—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞

üìû –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" –Ω–∏–∂–µ""",

    'about': """‚ÑπÔ∏è <b>–û –¥–∏–∑–∞–π–Ω–µ—Ä–µ</b>

üë®‚Äçüé® <b>Alyx Babysitter</b>
AI-–¥–∏–∑–∞–π–Ω–µ—Ä –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç

üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤
‚Ä¢ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω

üíº <b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ 100+ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏ –∏ –ª–µ–π–±–ª–∞–º–∏
‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤

üèÜ <b>–ü–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ:</b>
–ë—ã—Å—Ç—Ä–æ, —á–∏—Å—Ç–æ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ. –ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –¥–µ—Ç–∞–ª–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ.

üì± Telegram: @alyx_babysitter""",

    'help': """‚ùì <b>–ü–æ–º–æ—â—å</b>

üöÄ <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–£—Å–ª—É–≥–∏"
2. –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –±—Ä–∏—Ñ
4. –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞

üí¨ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/portfolio - –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
/services - –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã  
/contact - –ö–æ–Ω—Ç–∞–∫—Ç—ã
/about - –û –¥–∏–∑–∞–π–Ω–µ—Ä–µ

üåê <b>–ü–æ–ª–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b>
www.alyxbabysitter.ru

üìû <b>–ü—Ä—è–º–∞—è —Å–≤—è–∑—å:</b>
@alyx_babysitter –≤ Telegram

‚ö° –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!""",

    'contact': """üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>

üéØ <b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?</b>

üì± <b>Telegram:</b> @alyx_babysitter
üåê <b>–°–∞–π—Ç:</b> www.alyxbabysitter.ru
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 10:00 - 22:00 MSK

üí¨ <b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —á–µ—Ä–µ–∑ Menu

üöÄ <b>–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–±–æ—Ç–∞:</b>
1. –û–±—Å—É–∂–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –±—é–¥–∂–µ—Ç
2. –ó–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä, 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞  
3. –í—ã–ø–æ–ª–Ω—è—é —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞–º–∏
4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞ –∏ –¥–æ–ø–ª–∞—Ç–∞

‚ö° <i>–û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!</i>"""
}

# –î–∞–Ω–Ω—ã–µ –æ —É—Å–ª—É–≥–∞—Ö
SERVICES_DATA = {
    'order_twin': {
        'name': 'ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫',
        'price': '–û—Ç 15,000‚ÇΩ',
        'time': '2-3 –Ω–µ–¥–µ–ª–∏',
        'description': '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π AI-–º–æ–¥–µ–ª–∏ –ø–æ –≤–∞—à–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º'
    },
    'order_photo': {
        'name': 'üì∏ AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è',
        'price': '–û—Ç 5,000‚ÇΩ', 
        'time': '3-5 –¥–Ω–µ–π',
        'description': '–ü–∞–∫–µ—Ç AI-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ª—é–±–æ–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ'
    },
    'order_video': {
        'name': 'üé¨ AI-—Å–Ω–∏–ø–ø–µ—Ç',
        'price': '–û—Ç 3,000‚ÇΩ',
        'time': '2-3 –¥–Ω—è', 
        'description': '–ö–æ—Ä–æ—Ç–∫–∏–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–æ–ª–∏–∫ 9-15 —Å–µ–∫—É–Ω–¥'
    },
    'order_cover': {
        'name': 'üé® –û–±–ª–æ–∂–∫–∞ —Ä–µ–ª–∏–∑–∞',
        'price': '–û—Ç 2,000‚ÇΩ',
        'time': '1-2 –¥–Ω—è',
        'description': '–î–∏–∑–∞–π–Ω –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞'
    },
    'order_commercial': {
        'name': 'üíº –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—ä–µ–º–∫–∞',
        'price': '–û—Ç 8,000‚ÇΩ',
        'time': '5-7 –¥–Ω–µ–π',
        'description': '–†–µ–∫–ª–∞–º–Ω—ã–µ –≤–∏–∑—É–∞–ª—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏'
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞
ORDER_STATES = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio"),
            InlineKeyboardButton("üíé –£—Å–ª—É–≥–∏", callback_data="services")
        ],
        [
            InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –¥–∏–∑–∞–π–Ω–µ—Ä–µ", callback_data="about")
        ],
        [
            InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app=WebApp(url=WEBSITE_URL))
        ],
        [
            InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="subscribe")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_services_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫", callback_data="order_twin"),
            InlineKeyboardButton("üì∏ AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è", callback_data="order_photo")
        ],
        [
            InlineKeyboardButton("üé¨ AI-—Å–Ω–∏–ø–ø–µ—Ç", callback_data="order_video"),
            InlineKeyboardButton("üé® –û–±–ª–æ–∂–∫–∞", callback_data="order_cover")
        ],
        [
            InlineKeyboardButton("üíº –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—ä–µ–º–∫–∞", callback_data="order_commercial")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_portfolio_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üåê –ü–æ–ª–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", web_app=WebApp(url=WEBSITE_URL))
        ],
        [
            InlineKeyboardButton("ü§ñ –¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏", callback_data="portfolio_twins"),
            InlineKeyboardButton("üì∏ AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏", callback_data="portfolio_photos")
        ],
        [
            InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ-—Å–Ω–∏–ø–ø–µ—Ç—ã", callback_data="portfolio_videos"),
            InlineKeyboardButton("üé® –û–±–ª–æ–∂–∫–∏", callback_data="portfolio_covers")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.add_user(user.id, user.to_dict())
    
    await update.message.reply_text(
        MESSAGES['start'],
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

async def portfolio_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    await update.message.reply_text(
        MESSAGES['portfolio'],
        parse_mode='HTML',
        reply_markup=get_portfolio_keyboard()
    )

async def services_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    await update.message.reply_text(
        MESSAGES['services'],
        parse_mode='HTML',
        reply_markup=get_services_keyboard()
    )

async def contact_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @alyx_babysitter", url="https://t.me/alyx_babysitter")],
        [InlineKeyboardButton("üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app=WebApp(url=WEBSITE_URL))],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await update.message.reply_text(
        MESSAGES['contact'],
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/alyx_babysitter")],
        [InlineKeyboardButton("üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", web_app=WebApp(url=WEBSITE_URL))],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await update.message.reply_text(
        MESSAGES['about'],
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db.update_last_seen(user_id)
    
    await update.message.reply_text(
        MESSAGES['help'],
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    db.update_last_seen(user_id)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if data == "back_to_main":
        await query.edit_message_text(
            MESSAGES['start'],
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    
    elif data == "portfolio":
        await query.edit_message_text(
            MESSAGES['portfolio'],
            parse_mode='HTML',
            reply_markup=get_portfolio_keyboard()
        )
    
    elif data == "services":
        await query.edit_message_text(
            MESSAGES['services'],
            parse_mode='HTML',
            reply_markup=get_services_keyboard()
        )
    
    elif data == "contact":
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @alyx_babysitter", url="https://t.me/alyx_babysitter")],
            [InlineKeyboardButton("üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app=WebApp(url=WEBSITE_URL))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            MESSAGES['contact'],
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "about":
        keyboard = [
            [InlineKeyboardButton("üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/alyx_babysitter")],
            [InlineKeyboardButton("üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", web_app=WebApp(url=WEBSITE_URL))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            MESSAGES['about'],
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
    elif data == "subscribe":
        db.subscribe_user(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n\n<i>–û–±—ã—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é 1-2 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–¥–µ–ª—é.</i>",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "unsubscribe":
        db.unsubscribe_user(user_id)
        
        await query.edit_message_text(
            "üîï <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞!",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    
    # –°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤
    elif data.startswith("order_"):
        service = SERVICES_DATA.get(data)
        if service:
            keyboard = [
                [InlineKeyboardButton("üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"create_{data}")],
                [InlineKeyboardButton("üí¨ –û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏", url="https://t.me/alyx_babysitter")],
                [InlineKeyboardButton("üîô –ö —É—Å–ª—É–≥–∞–º", callback_data="services")]
            ]
            
            message = f"""<b>{service['name']}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service['price']}
‚è∞ <b>–°—Ä–æ–∫–∏:</b> {service['time']}

üìù <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
{service['description']}

<b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:</b>
1. –û–±—Å—É–∂–¥–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
2. –ó–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä, 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
3. –í—ã–ø–æ–ª–Ω—è—é —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞–º–∏
4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞ –∏ –¥–æ–ø–ª–∞—Ç–∞

üí¨ <i>–ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç!</i>"""
            
            await query.edit_message_text(
                message,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif data.startswith("create_order_"):
        service_type = data.replace("create_", "")
        service = SERVICES_DATA.get(service_type)
        
        if service:
            ORDER_STATES[user_id] = {
                'service_type': service_type,
                'service_name': service['name'],
                'step': 'name'
            }
            
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]]
            
            await query.edit_message_text(
                f"""üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {service['name']}</b>

<b>–®–∞–≥ 1 –∏–∑ 4:</b> –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.""",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif data == "cancel_order":
        if user_id in ORDER_STATES:
            del ORDER_STATES[user_id]
        
        await query.edit_message_text(
            "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    
    elif data == "start_order":
        await query.edit_message_text(
            "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–∫–∞–∑–∞:</b>",
            parse_mode='HTML',
            reply_markup=get_services_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
async def handle_order_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in ORDER_STATES:
        return
    
    order_state = ORDER_STATES[user_id]
    text = update.message.text
    
    if order_state['step'] == 'name':
        order_state['name'] = text
        order_state['step'] = 'contact'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]]
        
        await update.message.reply_text(
            f"""üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_state['service_name']}</b>

<b>–®–∞–≥ 2 –∏–∑ 4:</b> –ö–æ–Ω—Ç–∞–∫—Ç—ã

–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏—Ç–µ:
‚Ä¢ Telegram: @username
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (xxx) xxx-xx-xx  
‚Ä¢ Email: example@mail.com

–ò–ª–∏ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.""",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif order_state['step'] == 'contact':
        order_state['contact'] = text
        order_state['step'] = 'budget'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]]
        
        await update.message.reply_text(
            f"""üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_state['service_name']}</b>

<b>–®–∞–≥ 3 –∏–∑ 4:</b> –ë—é–¥–∂–µ—Ç

–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç?

–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5,000-10,000‚ÇΩ)
‚Ä¢ "–û–±—Å—É–¥–∏–º" - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å""",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif order_state['step'] == 'budget':
        order_state['budget'] = text
        order_state['step'] = 'description'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]]
        
        await update.message.reply_text(
            f"""üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_state['service_name']}</b>

<b>–®–∞–≥ 4 –∏–∑ 4:</b> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ:
‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å?
‚Ä¢ –ö–∞–∫–∞—è —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞?
‚Ä¢ –ï—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã?
‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è?

–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Å–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç!""",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif order_state['step'] == 'description':
        order_state['description'] = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        order_data = {
            'user_id': user_id,
            'username': update.effective_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω',
            'first_name': update.effective_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'service_type': order_state['service_type'],
            'service_name': order_state['service_name'],
            'name': order_state['name'],
            'contact': order_state['contact'],
            'budget': order_state['budget'],
            'description': order_state['description']
        }
        
        order_id = db.add_order(order_data)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        del ORDER_STATES[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text(
            f"""‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –°–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
‚Ä¢ –û–±—Å—É–¥–∏–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞  
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç
‚Ä¢ –ó–∞–∫–ª—é—á–∏–º –¥–æ–≥–æ–≤–æ—Ä –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üìã –£—Å–ª—É–≥–∞: {order_state['service_name']}
üë§ –ò–º—è: {order_state['name']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {order_state['contact']}
üí∞ –ë—é–¥–∂–µ—Ç: {order_state['budget']}

üì± –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é: @alyx_babysitter

<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üôè</i>""",
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        owner_message = f"""üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>

<b>–ö–ª–∏–µ–Ω—Ç:</b>
üë§ {order_data['first_name']} (@{order_data['username']})
üÜî ID: {user_id}

<b>–ó–∞–∫–∞–∑:</b>
üìã {order_data['service_name']}
üí∞ –ë—é–¥–∂–µ—Ç: {order_data['budget']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {order_data['contact']}

<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>
{order_data['description']}

<i>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"""
        
        try:
            await context.bot.send_message(
                chat_id=OWNER_ID,
                text=owner_message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text(
            """üì¢ <b>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>

<b>–ü—Ä–∏–º–µ—Ä:</b>
/broadcast üéâ –ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ AI-–ø–æ—Ä—Ç—Ä–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ Y2K.""",
            parse_mode='HTML'
        )
        return
    
    message = ' '.join(context.args)
    
    sent_count = 0
    failed_count = 0
    
    for subscriber_id in db.subscribers:
        try:
            await context.bot.send_message(
                chat_id=subscriber_id,
                text=f"üîî <b>–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç Alyx Babysitter</b>\n\n{message}",
                parse_mode='HTML'
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscriber_id}: {e}")
    
    await update.message.reply_text(
        f"""üìä <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}
üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(db.subscribers)}""",
        parse_mode='HTML'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    total_users = len(db.users)
    total_orders = len(db.orders)
    total_subscribers = len(db.subscribers)
    
    week_ago = datetime.now() - timedelta(days=7)
    new_users_week = sum(1 for user in db.users.values() if user['joined_at'] > week_ago)
    
    stats_message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers}

üìã <b>–ó–∞–∫–∞–∑—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}

‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
    
    await update.message.reply_text(stats_message, parse_mode='HTML')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("portfolio", portfolio_command))
    application.add_handler(CommandHandler("services", services_command))
    application.add_handler(CommandHandler("contact", contact_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_order_text
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ @alyx_design_bot...")
    application.run_polling(allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    main()
